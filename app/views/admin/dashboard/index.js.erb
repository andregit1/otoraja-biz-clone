$('#total-sales').html('Rp <%== formatedRupiah(@total_sales) %>')
$('#total-checkins').html('<%== @total_checkins %>')
$('#revenue-breakdown').html('Rp <%== formatedRupiah(@total_revenue) %>')
$('#total-profit').html('Rp <%== formatedRupiah(@total_profit) %>')
$('#total-profit-breakdown').html('Rp <%== formatedRupiah(@total_profit) %>')
$('#total-sales-breakdown').html('Rp <%== formatedRupiah((@total_sales+@total_down_payment)) %>')
$('#total-down_payment_amount-breakdown').html('Rp <%== formatedRupiah(@total_down_payment) %>')


$('#total-expenses-breakdown').html('Rp <%== formatedRupiah(@total_expenses) %>')

$('#average-sale').html('Rp <%== formatedRupiah((@total_checkins.zero? ? 0 : @total_sales/@total_checkins)) %>')

var salesDetails = [];
var salesDetailsCache = [];

var getSalesDetailsCache = function(){
  return salesDetailsCache;
}

var setSalesDetailsCache = function(object){
  salesDetailsCache = object
}

var toLocalCurrency = function(value){
    
  return value.toLocaleString("id-ID", {style: 'currency', currency:'IDN'});

}

var total_discount = 0;

var total_discount_data =  <%== @gross_discount_chart_data.values %>;

total_discount_data.forEach(function(val,index){
  total_discount += val;
})

var total_cogs = 0;

var total_cogs_data =  <%== @gross_sales_chart_data.values %>;

total_cogs_data.forEach(function(val,index){
  total_cogs += val;
})

$('#total-discount-breakdown').html(`Rp ${formatedNumber(total_discount)}`)
$('#total-cogs-breakdown').html(`Rp ${formatedNumber(total_cogs)}`)

//----------------------
//- Revenue BAR CHART -
//----------------------

var revenueBarChartData = {
  labels: <%== @gross_sales_chart_data.keys %>,
    datasets:[
    {
      label               : 'Modal',
      backgroundColor     : 'rgba(150, 217, 126, 1)',
      borderColor         : 'rgba(150, 217, 126, 1)',
      data                : <%== @gross_sales_chart_data.values %>,
      pointStyle          : 'circle'
    },
    {
      label               : 'Untung',
      backgroundColor     : 'rgba(60,141,188,0.9)',
      borderColor         : 'rgba(60,141,188,0.8)',
      data                : <%== @gross_profit_chart_data.values %>,
      pointStyle          : 'circle'
    },
    {
      label               : 'Uang Muka',
      backgroundColor     : 'rgba(254,193,7,1)',
      borderColor         : 'rgba(254,193,7,1)',
      data                : <%== @gross_down_payment.values %>,
      pointStyle          : 'circle'
    }
  ]
} 

var revenueBarChartCanvas = $('#revenueBarChart').get(0).getContext('2d')

var revenueBarChartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  legend :{
    display: false,
    labels:{
      usePointStyle: true,
      fontSize: 18
    }
  },
  legendCallback: function(chart) {
          var text = []; 
          text.push('<ul class="' + chart.id + '-legend">'); 
          for (var i = 0; i < chart.data.datasets.length; i++) { 
            text.push('<li class="badge badge-pill badge-secondary" style="background-color:' + chart.data.datasets[i].backgroundColor + '"><span></span>'); 
            if (chart.data.datasets[i].label) { 
              text.push(chart.data.datasets[i].label); 
            } 
            text.push('</li>'); 
          } 
          text.push('</ul>'); 
          return text.join('');
  },
  scales:{
    xAxes:[{
      stacked: true,
      barPercentage: 0.5,
      categoryPercentage: 0.5,
      ticks: {
        autoSkip: true,
        maxTicksLimit: 12
      }
    }],
    yAxes: [{
      stacked: true,
      ticks: {
        beginAtZero: true,
        userCallback: function(label, index, labels) {
          if (Math.floor(label) === label) {
            return formatedNumber(label);
          }
        }
      }
    }],
  },
  tooltips: {
    callbacks: {
      label: function(tooltipItem, data) {
        var label = data.datasets[tooltipItem.datasetIndex].label
        var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
        return [label + ' : ' + formatedNumber(value)]
      }
    }
  },
  plugins: {
    labels: {
      render: function (args) {
        return ''
      },
    }
  }
}

if(revenueBarChart){
  revenueBarChart.destroy();
}

var revenueBarChart = new Chart(revenueBarChartCanvas, {
  type: 'bar', 
  data: revenueBarChartData,
  options: revenueBarChartOptions,
})

var legend = document.getElementById("revenueLegend");

legend.innerHTML = revenueBarChart.generateLegend();

var legendItems = legend.getElementsByTagName('li');
for (var i = 0; i < legendItems.length; i += 1) {
  legendItems[i].addEventListener("click", legendClickCallback, false);
}


function legendClickCallback(event) {
  event = event || window.event;

  var target = event.target || event.srcElement;
  while (target.nodeName !== 'LI') {
      target = target.parentElement;
  }
  var parent = target.parentElement;
  var chartId = parseInt(parent.classList[0].split("-")[0], 10);
  var chart = Chart.instances[chartId];
  var index = Array.prototype.slice.call(parent.children).indexOf(target);
  var meta = chart.getDatasetMeta(index);
  
  if (meta.hidden === null) {
    meta.hidden = !chart.data.datasets[index].hidden;
    target.classList.add('hidden');
  } else {
    target.classList.remove('hidden');
    meta.hidden = null;
  }
  chart.update();
}

//----------------------
//- Profit BAR CHART -
//----------------------

var profitBarChartData = {
  labels: <%== @profit_by_product_chart_data.keys %>,
      datasets:[
        <% @profit_chart_datasets.each do | key, value | %>
        {
          label               : "<%== key.gsub(/\"/, '') %>",
          backgroundColor     : 'rgba(60,141,188,0.9)',
          borderColor         : 'rgba(60,141,188,0.8)',
          data                : <%== get_profit_chart_data(@profit_by_product_chart_data, key)%>,
          pointStyle          : 'circle'
        },
        <% end %>
      ]
} 

var profitBarChartCanvas = $('#profitBarChart').get(0).getContext('2d')

var profitBarChartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  legend :{
    display: false,
    labels:{
      usePointStyle: true,
      fontSize: 18
    }
  },
  scales:{
    xAxes:[{
      barPercentage: 0.5,
      categoryPercentage: 0.5,
      ticks: {
        autoSkip: true,
        maxTicksLimit: 12
      }
    }],
    yAxes: [{
      ticks: {
        beginAtZero: true,
        userCallback: function(label, index, labels) {
          if (Math.floor(label) === label) {
            return formatedNumber(label);
          }
        }
      }
    }],
  },
  tooltips: {
    callbacks: {
      label: function(tooltipItem, data) {
        var label = data.datasets[tooltipItem.datasetIndex].label
        var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
        return [label + ' : ' + formatedNumber(value)]
      }
    }
  },
  plugins: {
    labels: {
      render: function (args) {
        return ''
      },
    }
  }
}

if(profitBarChart){
  profitBarChart.destroy();
}

var profitBarChart = new Chart(profitBarChartCanvas, {
  type: 'bar', 
  data: profitBarChartData,
  options: profitBarChartOptions,
})

//----------------------
//- Expenses BAR CHART -
//----------------------

var expensesBarChartData = {
  labels: <%== @gross_expenses.keys %>,
      datasets:[
        {
          label               : "",
          backgroundColor     : 'rgba(60,141,188,0.9)',
          borderColor         : 'rgba(60,141,188,0.8)',
          data                : <%== @gross_expenses.values %>,
          <%# pointStyle          : 'circle', %>
          fill                : false,
        },
      ]
} 

var expensesBarChartCanvas = $('#expensesBarChart').get(0).getContext('2d')

var expensesBarChartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  legend :{
    display: false,
    labels:{
      usePointStyle: true,
      fontSize: 18
    }
  },
  scales:{
    xAxes: [{
      display: true,
      scaleLabel: {
        display: true,
        labelString: 'Date'
      },
    }],
    yAxes: [{
      ticks: {
        beginAtZero: true,
        userCallback: function(label, index, labels) {
          if (Math.floor(label) === label) {
            return formatedNumber(label);
          }
        }
      }
    }],
  },
  tooltips: {
    callbacks: {
      label: function(tooltipItem, data) {
        var label = data.datasets[tooltipItem.datasetIndex].label
        var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
        return [label + ' : ' + formatedNumber(value)]
      }
    }
  },
  plugins: {
    labels: {
      render: function (args) {
        return ''
      },
    }
  }
}

if(expensesBarChart){
  expensesBarChart.destroy();
}

var newOptions = {
  responsive: true,
  title: {
    display: true,
    text: 'Chart.js Line Chart - Logarithmic'
  },
  scales: {
    xAxes: [{
      display: true,
      scaleLabel: {
        display: true,
        labelString: 'Date'
      },
    }],
    yAxes: [{
      display: true,
      //type: 'logarithmic',
      scaleLabel: {
          display: true,
          labelString: 'Index Returns'
        },
        ticks: {
          min: 0,
          max: 500,

          // forces step size to be 5 units
          stepSize: 100
        }
    }]
  }
}

var expensesBarChart = new Chart(expensesBarChartCanvas, {
  type: 'line', 
  data: expensesBarChartData,
  options: expensesBarChartOptions,
})



//----------------------
//- CHECKINS BAR CHART -
//----------------------
var checkinsBarChartData = {
  labels  : <%== @checkins_chart_data.keys %>,
  datasets: [
    {
      label               : 'Checkins',
      backgroundColor     : 'rgba(60,141,188,0.9)',
      borderColor         : 'rgba(60,141,188,0.8)',
      pointRadius          : false,
      pointColor          : '#3b8bba',
      pointStrokeColor    : 'rgba(60,141,188,1)',
      pointHighlightFill  : '#fff',
      pointHighlightStroke: 'rgba(60,141,188,1)',
      data                : <%== @checkins_chart_data.values %>
    }
  ]
}
var checkinsBarChartCanvas = $('#checkinsBarChart').get(0).getContext('2d')

var checkinsBarChartOptions = {
  responsive              : true,
  maintainAspectRatio     : false,
  <%# title: {
    display: true,
    fontSize: 18,
    padding: 30,
    fontStyle: 'normal',
    text: 'CHECKINS AMOUNT'
  }, %>
  legend: {
    display: false
  },
  scales: {
    yAxes: [{
      ticks: {
        beginAtZero: true,
        userCallback: function(label, index, labels) {
          if (Math.floor(label) === label) {
            return formatedNumber(label);
          }
        }
      }
    }],
    xAxes: [{
      barPercentage: 0.5,
      categoryPercentage: 0.5,
      ticks: {
        autoSkip: true,
        maxTicksLimit: 12
      }
    }],
  },
  tooltips: {
    callbacks: {
      label: function(tooltipItem, data) {
        var label = data.datasets[tooltipItem.datasetIndex].label
        var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
        return [label + ' : ' + formatedNumber(value)]
      }
    }
  },
  plugins: {
    labels: {
      render: function (args) {
        return ''
      },
    }
  }
}

if(checkinsBarChart){
  checkinsBarChart.destroy();
}

var checkinsBarChart = new Chart(checkinsBarChartCanvas, {
  type: 'bar', 
  data: checkinsBarChartData,
  options: checkinsBarChartOptions,
})

//-------------------
//- SALES BAR CHART -
//-------------------

var salesBarChartData = {
  labels  : <%== @sales_chart_data.keys %>,
  datasets: [
    {
      label               : 'Sales',
      backgroundColor     : 'rgba(60,141,188,0.9)',
      borderColor         : 'rgba(60,141,188,0.8)',
      pointRadius          : false,
      pointColor          : '#3b8bba',
      pointStrokeColor    : 'rgba(60,141,188,1)',
      pointHighlightFill  : '#fff',
      pointHighlightStroke: 'rgba(60,141,188,1)',
      data                : <%== @sales_chart_data.values %>
    }
  ]
}
var salesBarChartCanvas = $('#salesBarChart').get(0).getContext('2d')

var salesBarChartOptions = {
    responsive              : true,
    maintainAspectRatio     : false,
    <%# title: {
      display: true,
      fontSize: 18,
      padding: 30,
      fontStyle: 'normal',
      text: 'SALES AMOUNT'
    }, %>
    legend: {
      display: false
    },
    scales: {
      yAxes: [{
        ticks: {
          beginAtZero: true,
          userCallback: function(label, index, labels) {
            if (Math.floor(label) === label) {
              return formatedNumber(label);
            }
          }
        }
      }],
      xAxes: [{
        barPercentage: 0.5,
        categoryPercentage: 0.5,
        ticks: {
          autoSkip: true,
          maxTicksLimit: 12
        }
      }],
    },
    tooltips: {
      callbacks: {
        label: function(tooltipItem, data) {
          var label = data.datasets[tooltipItem.datasetIndex].label
          var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]
          return [label + ' : ' + formatedNumber(value)]
        }
      }
    },
    plugins: {
      labels: {
        render: function (args) {
          return ''
        },
      }
    }
  }

if(salesBarChart){
  salesBarChart.destroy();
}

var salesBarChart = new Chart(salesBarChartCanvas, {
  type: 'bar', 
  data: salesBarChartData,
  options: salesBarChartOptions,
})


// ウィンドウリサイズに対応
$('#salesBarChart').css('width', '100%')
$('#checkinsBarChart').css('width', '100%')

// uncomment if summary product is activated

// $('#salesPieChart').css({'width': '100%', 'max-height': '300px'})

// 紐付く店舗が複数ある場合はセレクトボックス活性化
<% if current_user.managed_shops.length >= 2 %>
  $('#dashboard_shop_id').removeClass('unavailable-btn')
<% end %>

// 使用不可状態を解除
$('#daterange-btn').removeClass('unavailable-btn')
$('#sales_aggregation_unit_type').removeClass('unavailable-btn')
$('#checkins_aggregation_unit_type').removeClass('unavailable-btn')
$('#revenue_aggregation_unit_type').removeClass('unavailable-btn')
$('#profit_aggregation_unit_type').removeClass('unavailable-btn')
$('#expenses_aggregation_unit_type').removeClass('unavailable-btn')


// ピリオドで数値3桁区切り
function formatedNumber(num) {
  return num.toString().replace( /(\d)(?=(\d\d\d)+(?!\d))/g, '$1.')
}

//----------------------
//- SUMMARY BY MECHANIC -
//----------------------
$('#mechanic-details-tbody').empty();

<% @sales_by_mechanic.each do |detail| %>
  $('#mechanic-details-tbody').append(`
    <tr class='text-label'>
      <td><%= detail[:mechanic][:name] %></td>
      <td class='text-right'><%= formatedRupiah(detail[:total])%></td>
      <td class='text-right'><%= formatedRupiah(detail[:products])%></td>
      <td class='text-right'><%= formatedRupiah(detail[:product_transactions])%></td>
      <td class='text-right'><%= formatedRupiah(detail[:services])%></td>
      <td class='text-right'><%= formatedRupiah(detail[:service_transactions])%></td>
      <td class='text-right'><%= link_to 'Lihat', admin_mechanic_reports_path(select_mechanic: detail[:mechanic][:id], start_date: @start_datetime.strftime('%Y-%m-%d 00:00:00'), end_date: @end_datetime.strftime('%Y-%m-%d 23:59:59')) %></td>
    </tr>
  `);
<% end %>

//------------------------
//- SALES BY PAYMENT TYPE -
//------------------------
$('#sales-by-type-tbody').empty();
<% @sales_by_payment_type.each do |detail| %>
  $('#sales-by-type-tbody').append("<tr class='text-label'><td><%= detail[:name]%></td><td><span style='float: right;'><%= formatedRupiah(detail[:amount])%></span></td></tr>");
<% end %>


setTimeout(function(){
  window.app.dashboard.hideLoading();
}, 1);

